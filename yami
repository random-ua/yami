#!/usr/bin/env php
<?php declare(strict_types=1);

include_once("vendor/autoload.php");

$console = new Console\Runner();
$console->setAppName('Yami');
$console->setAppVersion('0.0.1');

// Add one or more commands here
$console->registerAll([
    'migrate' => [
        'class' => Yami\Console\Migrate::class,
        'description' => 'Migrate new changes to YAML file'
    ],
    'rollback' => [
        'class' => Yami\Console\Rollback::class,
        'description' => 'Rollback recent changes to YAML file'
    ],
    'create' => [
        'class' => Yami\Console\Create::class,
        'description' => 'Create a migration file'
    ],
    'config' => [
        'class' => Yami\Console\Config::class,
        'description' => 'Create a configuration file'
    ],
    'mask' => [
        'class' => Yami\Console\Mask::class,
        'description' => 'Mask the contents of a YAML file'
    ],
    'history' => [
        'class' => Yami\Console\History::class,
        'description' => 'View a history of changes'
    ],
]);

// Set stdout ansi preferences
$args = new Console\Args($argv);
$args->setAliases([
    'n' => 'no-ansi'
]);

// disable ANSI automatically if output is not a terminal (i.e. redirected to file)
// XXX: made a default logic of isAnsiEnabled() ?
if (isset($args->{'no-ansi'}) || !posix_isatty(STDOUT)) Console\StdOut::disableAnsi();
if (isset($args->{'no-ansi'}) || !posix_isatty(STDERR)) Console\StdErr::disableAnsi();

// Start your engines...
try {
    $console->run();
} catch(Console\Exception\CommandNotFoundException $e) {
    Console\StdErr::write([[ $console->getHelp(), 'red' ]]);
    exit(1);
} catch(Exception $e) {
    Console\StdErr::write([
        [sprintf("%s\n\n", $e->getMessage()), 'red bold']
    ]);
    exit(1);
} catch(Throwable $t) {
    Console\StdErr::write([
        [sprintf("%s\n\n", $t), 'red bold']
    ]);
    exit(1);
}

exit(0);